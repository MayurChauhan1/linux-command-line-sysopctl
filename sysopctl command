#!/bin/bash

# sysopctl version
VERSION="v0.1.0"

# Display help message
function display_help() {
    echo "sysopctl - A system management command line tool"
    echo "Usage: sysopctl [command] [options]"
    echo
    echo "Commands:"
    echo "  service list                     List all active services"
    echo "  service start <service-name>     Start a specified service"
    echo "  service stop <service-name>      Stop a specified service"
    echo "  system load                      Display the current system load"
    echo "  disk usage                       Display disk usage by partition"
    echo "  process monitor                  Monitor system processes in real-time"
    echo "  logs analyze                     Analyze recent critical system logs"
    echo "  backup <path>                    Backup system files from the specified path"
    echo
    echo "Options:"
    echo "  --help                           Display this help message"
    echo "  --version                        Display the command version"
    echo
    echo "Examples:"
    echo "  sysopctl service list"
    echo "  sysopctl system load"
    echo "  sysopctl backup /etc"
}

# Display version information
function display_version() {
    echo "sysopctl $VERSION"
}

# List all active services
function list_services() {
    systemctl list-units --type=service --state=active
}

# View system load
function view_system_load() {
    uptime
}

# Start a system service
function start_service() {
    if [ -z "$1" ]; then
        echo "Error: No service name provided."
        echo "Usage: sysopctl service start <service-name>"
    else
        sudo systemctl start "$1"
        if [ $? -eq 0 ]; then
            echo "Service '$1' started successfully."
        else
            echo "Failed to start service '$1'."
        fi
    fi
}

# Stop a system service
function stop_service() {
    if [ -z "$1" ]; then
        echo "Error: No service name provided."
        echo "Usage: sysopctl service stop <service-name>"
    else
        sudo systemctl stop "$1"
        if [ $? -eq 0 ]; then
            echo "Service '$1' stopped successfully."
        else
            echo "Failed to stop service '$1'."
        fi
    fi
}

# Check disk usage
function check_disk_usage() {
    df -h
}

# Monitor system processes
function monitor_processes() {
    top
}

# Analyze system logs
function analyze_logs() {
    sudo journalctl -p 3 -xb
}

# Backup system files
function backup_files() {
    if [ -z "$1" ]; then
        echo "Error: No backup path provided."
        echo "Usage: sysopctl backup <path>"
    else
        rsync -avz "$1" /backup/
        if [ $? -eq 0 ]; then
            echo "Backup of '$1' completed successfully."
        else
            echo "Failed to backup '$1'."
        fi
    fi
}

# Main function to handle input commands
function main() {
    case "$1" in
        --help)
            display_help
            ;;
        --version)
            display_version
            ;;
        service)
            case "$2" in
                list)
                    list_services
                    ;;
                start)
                    start_service "$3"
                    ;;
                stop)
                    stop_service "$3"
                    ;;
                *)
                    echo "Invalid service command. Use --help for usage information."
                    ;;
            esac
            ;;
        system)
            if [ "$2" == "load" ]; then
                view_system_load
            else
                echo "Invalid system command. Use --help for usage information."
            fi
            ;;
        disk)
            if [ "$2" == "usage" ]; then
                check_disk_usage
            else
                echo "Invalid disk command. Use --help for usage information."
            fi
            ;;
        process)
            if [ "$2" == "monitor" ]; then
                monitor_processes
            else
                echo "Invalid process command. Use --help for usage information."
            fi
            ;;
        logs)
            if [ "$2" == "analyze" ]; then
                analyze_logs
            else
                echo "Invalid logs command. Use --help for usage information."
            fi
            ;;
        backup)
            backup_files "$2"
            ;;
        *)
            echo "Invalid command. Use --help for usage information."
            ;;
    esac
}

# Execute the main function with passed arguments
main "$@"
